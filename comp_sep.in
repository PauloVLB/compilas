PROGRAM ::= program NAME begin DECL_SECTION end

DECL_SECTION ::= ''
DECL_SECTION ::= DECL DECL_LIST

DECL_LIST ::= ; DECL DECL_LIST
DECL_LIST ::= ''

DECL ::= VAR_DECL
DECL ::= PROC_DECL
DECL ::= REC_DECL

VAR_DECL ::= var NAME VAR_DECL_TYPE

VAR_DECL_TYPE ::= : TYPE VAR_INIT
VAR_DECL_TYPE ::= := EXP

VAR_INIT ::= := EXP
VAR_INIT ::= ''

PROC_DECL ::= procedure NAME ( PARAMFIELD_LIST ) TYPE_ANNOTATION BLOCK

PARAMFIELD_LIST ::= ''
PARAMFIELD_LIST ::= PARAMFIELD_DECL PARAMFIELD_LIST_TAIL

PARAMFIELD_LIST_TAIL ::= , PARAMFIELD_DECL PARAMFIELD_LIST_TAIL
PARAMFIELD_LIST_TAIL ::= ''

TYPE_ANNOTATION ::= : TYPE
TYPE_ANNOTATION ::= ''

BLOCK ::= begin Z end

Z ::= STMT_LIST
Z ::= in STMT_LIST
Z ::= DECL DECL_LIST in STMT_LIST

REC_DECL ::= struct NAME { PARAMFIELD_DECLS }

PARAMFIELD_DECLS ::= PARAMFIELD_DECL ; PARAMFIELD_DECLS
PARAMFIELD_DECLS ::= ''

STMT_LIST ::= ''
STMT_LIST ::= STMT STMT_LIST_TAIL

STMT_LIST_TAIL ::= ; STMT STMT_LIST_TAIL
STMT_LIST_TAIL ::= ''

EXP ::= OR_EXP

OR_EXP ::= AND_EXP OR_EXP_PRIME

OR_EXP_PRIME ::= || AND_EXP OR_EXP_PRIME
OR_EXP_PRIME ::= ''

AND_EXP ::= NOT_EXP AND_EXP_PRIME

AND_EXP_PRIME ::= && NOT_EXP AND_EXP_PRIME
AND_EXP_PRIME ::= ''

NOT_EXP ::= not NOT_EXP
NOT_EXP ::= REL_EXP

REL_EXP ::= ADD_EXP REL_EXP_PRIME

REL_EXP_PRIME ::= REL_OP ADD_EXP REL_EXP_PRIME
REL_EXP_PRIME ::= ''

ADD_EXP ::= MUL_EXP ADD_EXP_PRIME

ADD_EXP_PRIME ::= + MUL_EXP ADD_EXP_PRIME
ADD_EXP_PRIME ::= - MUL_EXP ADD_EXP_PRIME
ADD_EXP_PRIME ::= ''

MUL_EXP ::= EXP_EXP MUL_EXP_PRIME

MUL_EXP_PRIME ::= * EXP_EXP MUL_EXP_PRIME
MUL_EXP_PRIME ::= / EXP_EXP MUL_EXP_PRIME
MUL_EXP_PRIME ::= ''

EXP_EXP ::= ACCESS EXP_EXP_PRIME

EXP_EXP_PRIME ::= ^ ACCESS EXP_EXP_PRIME
EXP_EXP_PRIME ::= ''

ACCESS ::= PRIMARY ACCESS_PRIME

ACCESS_PRIME ::= . NAME ACCESS_PRIME
ACCESS_PRIME ::= ''

PRIMARY ::= PRIMARY_NAME_BEGIN
PRIMARY ::= LITERAL
PRIMARY ::= new NAME
PRIMARY ::= REF_VAR
PRIMARY ::= DEREF_VAR
PRIMARY ::= ( EXP )

REF_VAR ::= ref ( VAR )

DEREF_VAR ::= deref ( C )

C ::= VAR
C ::= DEREF_VAR

PARAMFIELD_DECL ::= NAME : TYPE

PRIMARY_NAME_BEGIN ::= NAME Y

Y ::= VAR_ACCESS
Y ::= ( E )

VAR ::= NAME VAR_ACCESS

CALL_STMT ::= NAME ( E )

VAR_ACCESS ::= [ EXP ] VAR_ACCESS
VAR_ACCESS ::= ''

REL_OP ::= <
REL_OP ::= <=
REL_OP ::= >
REL_OP ::= >=
REL_OP ::= =
REL_OP ::= <>

LITERAL ::= FLOAT_LITERAL
LITERAL ::= INT_LITERAL
LITERAL ::= STRING_LITERAL
LITERAL ::= BOOL_LITERAL
LITERAL ::= null

BOOL_LITERAL ::= true
BOOL_LITERAL ::= false

STMT ::= STMT_NAME_BEGIN
STMT ::= DEREF_VAR := EXP
STMT ::= IF_STMT
STMT ::= WHILE_STMT
STMT ::= RETURN_STMT

STMT_NAME_BEGIN ::= NAME X
X ::= VAR_ACCESS := EXP
X ::= ( E )

ASSIGN_STMT ::= VAR := EXP
ASSIGN_STMT ::= DEREF_VAR := EXP

IF_STMT ::= if EXP then STMT_LIST D fi

D ::= else STMT_LIST
D ::= ''

WHILE_STMT ::= while EXP do STMT_LIST od

RETURN_STMT ::= return ( EXP )

E ::= EXP E_TAIL

E_TAIL ::= , EXP E_TAIL
E_TAIL ::= ''

TYPE ::= float
TYPE ::= int
TYPE ::= string
TYPE ::= bool
TYPE ::= NAME
TYPE ::= ref ( TYPE )
TYPE ::= array F of TYPE

F ::= INT_LITERAL
F ::= ''
